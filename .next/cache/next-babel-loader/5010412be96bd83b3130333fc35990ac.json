{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_LANGUAGE_E, SET_LANGUAGE_S } from '../types';\nconst initialState = true;\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_LANGUAGE_E:\n      return _objectSpread({}, state = true);\n\n    case SET_LANGUAGE_S:\n      return _objectSpread({}, state = false);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/guggenz/Documents/Dev/Clients/SAFA/CMS/client/redux/reducers/language.js"],"names":["SET_LANGUAGE_E","SET_LANGUAGE_S","initialState","state","action","type","payload"],"mappings":";;;;;;AAAA,SACIA,cADJ,EAEIC,cAFJ,QAGO,UAHP;AAKA,MAAMC,YAAY,GAAG,IAArB;AAEA,eAAe,UAAUC,KAAK,GAAGD,YAAlB,EAAgCE,MAAhC,EAAwC;AACnD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACI,SAAKL,cAAL;AACI,+BACGG,KAAK,GAAG,IADX;;AAGJ,SAAKF,cAAL;AACI,+BACGE,KAAK,GAAG,KADX;;AAGJ;AACI,aAAOA,KAAP;AAVR;AAYD","sourcesContent":["import {\n    SET_LANGUAGE_E,\n    SET_LANGUAGE_S\n} from '../types'\n\nconst initialState = true\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n  \n    switch (type) {\n        case SET_LANGUAGE_E:\n            return {\n            ...state = true\n            };\n        case SET_LANGUAGE_S:\n            return {\n            ...state = false\n            };\n        default:\n            return state;\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}